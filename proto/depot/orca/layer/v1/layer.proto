syntax = "proto3";

package depot.orca.layer.v1;

import "google/protobuf/timestamp.proto";

// LayerEntries
message LayerEntries {
  repeated LayerEntry entries = 1;
}

message LayerEntry {
  // Path specifies the path from the bundle root. If more than one
  // path is present, the entry may represent a hardlink, rather than using
  // a link target. The path format is operating system specific.
  repeated string path = 1;

  // Size specifies the size in bytes.
  uint64 size_bytes = 2;

  // Ordered set of blocks that make up the content of the entry.
  repeated Block blocks = 3;

  // Uid specifies the user id for the entry.
  int64 uid = 4;

  // Gid specifies the group id for the entry.
  int64 gid = 5;

  // Modified time of the entry.
  google.protobuf.Timestamp mtime = 6;

  // Mode defines the file mode and permissions. We've used the same
  // bit-packing from Go's os package,
  // http://golang.org/pkg/os/#FileMode, since they've done the work of
  // creating a cross-platform layout.
  uint32 mode = 7;

  // Target defines the target of a hard or soft link. Absolute links start
  // with a slash and specify the entry relative to the bundle root.
  // Relative links do not start with a slash and are relative to the
  // entry path.
  string target = 8;

  // Major specifies the major device number for character and block devices.
  uint64 major = 9;

  // Minor specifies the minor device number for character and block devices.
  uint64 minor = 10;

  // Xattr provides storage for extended attributes for the target entry.
  repeated XAttr xattr = 11;

  // Ads stores one or more alternate data streams for the target entry.
  repeated ADSEntry ads = 12;
}

// Block is a content-addressable variable-sized block of file content.
message Block {
  uint64 size_bytes = 1;
  Digest digest = 2;
}

message Digest {
  enum Algorithm {
    ALGORITHM_UNSPECIFIED = 0;
    ALGORITHM_XXH64 = 1;
  }

  Algorithm algorithm = 1;
  uint64 sum = 2;
}

// XAttr encodes extended attributes for a entry.
message XAttr {
  // Name specifies the attribute name.
  string name = 1;

  // Data specifies the associated data for the attribute.
  bytes data = 2;
}

// ADSEntry encodes information for a Windows Alternate Data Stream.
message ADSEntry {
  // Name specifices the stream name.
  string name = 1;

  // Data specifies the stream data.
  // See also the description about the digest below.
  bytes data = 2;

  // Digest is a CAS representation of the stream data.
  //
  // At least one of data or digest MUST be specified, and either one of them
  // SHOULD be specified.
  //
  // How to access the actual data using the digest is implementation-specific,
  // and implementations can choose not to implement digest.
  // So, digest SHOULD be used only when the stream data is large.
  string digest = 3;
}
